set nocompatible              " be iMproved, required
filetype off                  " required

"map the leader key
nnoremap , <NOP>
let mapleader = ","
nmap <space> ,
let maplocalleader = "`"

" set the runtime path to include Vundle and initialize
set rtp+=$GIT_PATH/linux_dotfiles/submodules/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

Plugin 'JamshedVesuna/vim-markdown-preview'
let vim_markdown_preview_toggle=2
let vim_markdown_preview_github=1

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" Vim-friendly navigation of tmux environment
Plugin 'christoomey/vim-tmux-navigator'

" Vim Pretty indentations
Plugin 'Yggdroot/indentLine'

" Vim
let g:indentLine_color_term = 239

" GVim
let g:indentLine_color_gui = '#A4E57E'

" none X terminal
let g:indentLine_color_tty_light = 7 " (default: 4)
let g:indentLine_color_dark = 1 " (default: 2)

" Pretty Vim status bar
Plugin 'bling/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

" file manager (leader+n)
Plugin 'scrooloose/nerdtree'

" fugitive.vim: a Git wrapper so awesome, it should be illegal
Plugin 'tpope/vim-fugitive'

" Clever motions helper
" highlights letters while using f, t motions
Plugin 'unblevable/quick-scope'

" C++ autocomplete
Plugin 'ycm-core/YouCompleteMe'
Plugin 'rdnetto/YCM-Generator'
source $GIT_PATH/linux_dotfiles/nvim/youcompleteme.vim

" Vim-ros 
Plugin 'klaxalk/vim-ros'
source $GIT_PATH/linux_dotfiles/nvim/vim-ros.vim

" autoformatting c++ code
Plugin 'https://github.com/rhysd/vim-clang-format'

" better highlighting for c++11/14/17
Plugin 'octol/vim-cpp-enhanced-highlight'
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1
let g:cpp_experimental_template_highlight = 1

" find files in vim
Plugin 'ctrlpvim/ctrlp.vim'
source $GIT_PATH/linux_dotfiles/nvim/ctrlp.vim

Plugin 'gabesoft/vim-ags'
source $GIT_PATH/linux_dotfiles/nvim/vim-ags.vim

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

inoremap jk <ESC>



syntax on
set number
set noswapfile
set hlsearch
set ignorecase
set incsearch

" " Copy to clipboard
vnoremap  <leader>y  "+y
nnoremap  <leader>Y  "+yg_
nnoremap  <leader>y  "+y
nnoremap  <leader>yy  "+yy

" " Paste from clipboard
nnoremap <leader>p "+p
nnoremap <leader>P "+P
vnoremap <leader>p "+p
vnoremap <leader>P "+P

map <F5> :w <CR> :!g++ % -std=c++17 -o %< && ./%< <CR>

" " Setup tabs
set tabstop=2
set shiftwidth=2
set expandtab

" " Set filetypes for launch and urdf files
autocmd BufEnter *.launch :setlocal filetype=xml
autocmd BufEnter *.urdf :setlocal filetype=xml

" " Set airline
let g:airline_theme='papercolor'

" running airline
set laststatus=2					" allow running without splitting

" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1

" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'

" used patched fonts with special characters
let g:airline_powerline_fonts = 1

" NERDtree config

" open new tab and run nerdtree
nmap <leader>t :tabedit<cr>:NERDTreeToggle<cr>

" nerd tree toggle binding
nnoremap <leader>n :NERDTreeToggle<CR>

inoremap " ""<left>
"inoremap ' ''<left>
inoremap ( ()<left>
inoremap [ []<left>
inoremap { {}<left>
inoremap {<CR> {<CR>}<ESC>O
inoremap {;<CR> {<CR>};<ESC>O

inoremap <expr> ) getline('.')[getpos('.')[2] - 1] == ')' ? '<Right>' : ')'
inoremap <expr> } getline('.')[getpos('.')[2] - 1] == '}' ? '<Right>' : '}'
inoremap <expr> ] getline('.')[getpos('.')[2] - 1] == ']' ? '<Right>' : ']'
" inoremap <expr> ' getline('.')[getpos('.')[2] - 1] == ''' ? '<Right>' : '''
" Doesnt work for some reason
" inoremap <expr> " getline('.')[getpos('.')[2] - 1] == '"' ? '<Right>' : '"'

colorscheme elflord
